using System;
using System.IO;
using System.Linq;
using Caffeine.Editor;
using UnityEditor;
using UnityEngine;

[ExecuteInEditMode]
public class BuildService
{
    private static string _buildTarget;
    private static BuildProfile _buildProfile;

    [InitializeOnLoadMethod]
    public static void OnHook()
    {
        AssetDatabase.importPackageCompleted += PackageImportComplete;
    }

    private static void PackageImportComplete(string packageName)
    {
        try
        {
            var sceneName = Path.GetFileNameWithoutExtension(packageName);
            if (string.IsNullOrEmpty(sceneName)) EditorApplication.Exit(0);
        
            Build(sceneName);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            EditorApplication.Exit(0);
        }
    }

    public static void Build(string sceneName)
    {
        try
        {
            var scenesGUIDs = AssetDatabase.FindAssets("t:Scene");
            var scenePaths = scenesGUIDs.Select(AssetDatabase.GUIDToAssetPath);
            var scenePathToLoad = string.Empty;

            foreach (var scenePath in scenePaths)
            {
                if (!scenePath.Contains(sceneName)) continue;
                scenePathToLoad = scenePath;
                
                break;
            }
            
            if ( !string.IsNullOrEmpty(scenePathToLoad))
            {
                _buildProfile = BuildProfile.BuildProfileForResourcePath(scenePathToLoad);
                var currentPlatform = EditorUserBuildSettings.activeBuildTarget;
                AssetBundleManifest buildManifest = null;

                var bundlePath = $"{_buildProfile.outputPath}{_buildProfile.bundleName}";
                
                if (File.Exists(bundlePath)) File.Delete(bundlePath);
            
                switch (currentPlatform)
                {
                    case BuildTarget.Android:
                        BuildPipeline.BuildAssetBundles(_buildProfile.outputPath, _buildProfile.moduleBuildMap, BuildAssetBundleOptions.UncompressedAssetBundle, currentPlatform);
                        break;
                
                    case BuildTarget.iOS:
                        BuildPipeline.BuildAssetBundles(_buildProfile.outputPath, _buildProfile.moduleBuildMap, BuildAssetBundleOptions.ChunkBasedCompression, currentPlatform);
                        break;
                
                    case BuildTarget.StandaloneWindows64:
                        BuildPipeline.BuildAssetBundles(_buildProfile.outputPath, _buildProfile.moduleBuildMap, BuildAssetBundleOptions.ChunkBasedCompression, currentPlatform);
                        break;
                
                    case BuildTarget.StandaloneOSX:
                        BuildPipeline.BuildAssetBundles(_buildProfile.outputPath, _buildProfile.moduleBuildMap, BuildAssetBundleOptions.ChunkBasedCompression, currentPlatform);
                        break;
                    
                    default:
                        EditorApplication.Exit(0);
                        break;
                }


                if (File.Exists(bundlePath))
                {
                    EditorApplication.Exit(1);
                }
                
                EditorApplication.Exit(0);
            }
            
            EditorApplication.Exit(0);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            EditorApplication.Exit(0);
        }
    }
}